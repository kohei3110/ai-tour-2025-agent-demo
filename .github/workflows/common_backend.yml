name: Build and Deploy Backend API

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY_API:
        required: true
        type: string
      ACR:
        required: true
        type: string
      IMAGE_NAME_API:
        required: true
        type: string
      TAG:
        required: true
        type: string
      CONTAINER_APP_NAME:
        required: true
        type: string
      RESOURCE_GROUP:
        required: true
        type: string
      REGION:
        required: true
        type: string
    secrets:
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true
      PROJECT_CONNECTION_STRING:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_CLIENT_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
  
env:
  FULL_IMAGE_NAME_API: ${{ inputs.ACR }}/${{ inputs.IMAGE_NAME_API }}:${{ inputs.TAG }}
  PORT: 8000
  INGRESS: external

jobs:
  build-app:
    name: Build app and push docker image to Azure Container Registry
    runs-on: ubuntu-latest

    steps:
      - id: checkout
        name: Checkout GitHub repository
        uses: actions/checkout@v3

      - id: login-acr
        name: Log in Azure Container Registry (ACR)
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.ACR }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - id: build-image-api
        name: Build docker image
        run: |
          docker build . -t ${{ env.FULL_IMAGE_NAME_API }}
        working-directory: ${{ inputs.WORKING_DIRECTORY_API }}

      - id: push-image-api
        name: Push docker image to ACR
        run: |
          docker push ${{ env.FULL_IMAGE_NAME_API }}
        working-directory: ${{ inputs.WORKING_DIRECTORY_API }}

  deploy-app:
    name: Deploy app to Azure App Service
    runs-on: ubuntu-latest
    needs: build-app

    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v3

      - id: login-azure
        name: Log in Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Generate template.yml with dynamic GIT_SHA
        run: |
          mkdir -p ${{ inputs.WORKING_DIRECTORY_API }}/config/containerapps
          cat <<EOF > ${{ inputs.WORKING_DIRECTORY_API }}/config/containerapps/template.yml
          template:
            containers:
            - image: ${{ env.FULL_IMAGE_NAME_API }}
              name: ${{ inputs.IMAGE_NAME_API }}
              probes:
              - type: Liveness
                httpGet:
                  path: "/api/health"
                  port: ${{ env.PORT }}
                initialDelaySeconds: 10
                periodSeconds: 10
              resources:
                cpu: 1
                memory: 2Gi
            initContainers: null
            scale:
              maxReplicas: 3
              minReplicas: 1
              rules:
              - name: httpscalingrule
                custom:
                  type: http
                  metadata:
                    concurrentRequests: '50'
          EOF

      - name: Deploy API image To Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          containerAppName: ${{ inputs.CONTAINER_APP_NAME }}
          resourceGroup: ${{ inputs.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.FULL_IMAGE_NAME_API }}
          targetPort: ${{ env.PORT }}
          ingress: ${{ env.INGRESS }}
          yamlConfigPath: ${{ inputs.WORKING_DIRECTORY_API }}/config/containerapps/template.yml

      - name: Update environment variables for Azure Container Apps
        run: |
          az containerapp update --name ${{ inputs.CONTAINER_APP_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --container-name ${{ inputs.CONTAINER_APP_NAME }} --set-env-vars "PROJECT_CONNECTION_STRING=${{ secrets.PROJECT_CONNECTION_STRING }}" "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"